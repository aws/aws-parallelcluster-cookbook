# Validates config recipes
---
_common_cluster_attributes: &_common_cluster_attributes
  stack_name: <%= ENV['AWS_STACK_NAME'] %>
  volume: <%= ENV['VOLUME'] || "''" %>
  region: <%= ENV['KITCHEN_AWS_REGION'] %>
  ephemeral_dir: <%= ENV['EPHEMERAL_DIR'] || '/scratch' %>
  ebs_shared_dirs: <%= ENV['EBS_SHARED_DIRS'] || '/shared' %>
  cluster_s3_bucket: <%= ENV['CLUSTER_CONFIG_S3_BUCKET'] %>
  cluster_config_s3_key: <%= ENV['CLUSTER_CONFIG_S3_KEY'] %>
  instance_types_data_s3_key: <%= ENV['INSTANCE_TYPES_DATA_S3_KEY'] %>
  os: <%= ENV['OS'] %>
  custom_node_package: <%= ENV['PARALLELCLUSTER_NODE_URL'] %>
  dcv_enabled: 'head_node'
  dcv_port: '8443'
  enable_efa: 'compute'
  nvidia:
    enabled: <%= ENV['NVIDIA_ENABLED'] %>

_head_node_cluster_attributes: &_head_node_cluster_attributes
  << : *_common_cluster_attributes
  node_type: 'HeadNode'
  ddb_table: <%= ENV['DDB_TABLE'] %>
  slurm_ddb_table: <%= ENV['DDB_TABLE'] %>

_compute_node_cluster_attributes: &_compute_node_cluster_attributes
  << : *_common_cluster_attributes
  node_type: 'ComputeFleet'
  head_node: <%= ENV['HEAD_NODE'] %>
  head_node_private_ip: <%= ENV['HEAD_NODE_PRIVATE_IP'] %>

_run_list: &_run_list
  - recipe[aws-parallelcluster::init]
  - recipe[aws-parallelcluster::config]
  - recipe[aws-parallelcluster::finalize]
  - recipe[aws-parallelcluster::tests]
  - recipe[aws-parallelcluster-common::node_attributes]

_run_list_with_mocks: &_run_list_with_mocks
  - recipe[aws-parallelcluster::tests_mock]
  - recipe[aws-parallelcluster::init]
  - recipe[aws-parallelcluster::config]
  - recipe[aws-parallelcluster::finalize]
  - recipe[aws-parallelcluster::tests]
  - recipe[aws-parallelcluster-common::node_attributes]

provisioner:
  attributes:
    kitchen: true

suites:
  - name: slurm_config_HeadNode
    run_list: *_run_list
    verifier:
      controls:
        # ENVARS
        - system_path_contains_required_directories
        - paths_for_notable_users_contain_required_directories
        # USERS
        - admin_user_correctly_defined
        - slurm_user_correctly_defined
        - munge_user_correctly_defined
        - dcv_external_authenticator_user_correctly_defined
        # SUDOERS
        - cluster_user_can_sudo
        # PROCESSES
        - supervisord_runs_as_root
        # IMDS
        - allowed_users_can_access_imds
        - not_allowed_users_can_not_access_imds
        - iptables_correctly_configured
        # SLURM
        - slurm_plugin_permissions_correctly_defined_on_head_node
        - slurm_sudoers_correctly_defined
        # not running - clustermgtd_runs_as_cluster_admin_user
        - computemgtd_runs_as_cluster_admin_user
        # OPENSSH
        - ssh_target_checker_contains_correct_vpc_cidr_list
    attributes:
      cluster:
        << : *_head_node_cluster_attributes
        scheduler: 'slurm'
        enable_intel_hpc_platform: "<%= ENV['ENABLE_INTEL_HPC_PLATFORM'] || false %>"

  - name: scheduler_plugin_config_HeadNode
    run_list: *_run_list_with_mocks
    attributes:
      cluster:
        << : *_head_node_cluster_attributes
        scheduler: 'plugin'
        enable_intel_hpc_platform: "<%= ENV['ENABLE_INTEL_HPC_PLATFORM'] %>"

  - name: awsbatch_config_HeadNode
    run_list: *_run_list
    attributes:
      cluster:
        << : *_head_node_cluster_attributes
        scheduler: 'awsbatch'
        custom_awsbatchcli_package: <%= ENV['CUSTOM_AWSBATCHCLI_URL'] %>

  - name: slurm_config_ComputeFleet
    run_list: *_run_list
    attributes:
      cluster:
        << : *_compute_node_cluster_attributes
        scheduler: 'slurm'
        slurm_nodename: 'fake-dy-compute-1'

  - name: scheduler_plugin_config_ComputeFleet
    run_list: *_run_list_with_mocks
    attributes:
      cluster:
        << : *_compute_node_cluster_attributes
        scheduler: 'plugin'
        scheduler_plugin_nodename: 'fake-dy-compute-1'
