#!/bin/bash
# This script updates the password used by slurmdbd to connect to the backing MySQL database
# according to the secret stored in AWS Secrets Manager.
# In particular, it updates the password in /opt/slurm/etc/slurm_parallelcluster_slurmdbd.conf (StoragePass)
# with the one stored in AWS Secrets Manager, if they do not match.
# The script does not require any argument.
#
# Usage: ./update_slurm_database_password.sh
# #

set -e

<% if node['is_external_slurmdbd'] %>
SLURMDBD_CONFIG_FILE="<%= @slurm_install_dir %>/etc/slurm_external_slurmdbd.conf"
<% else %>
SLURMDBD_CONFIG_FILE="<%= @slurm_install_dir %>/etc/slurm_parallelcluster_slurmdbd.conf"
<% end %>
SLURMDBD_PROPERTY="StoragePass"
SECRET_ARN="<%= @secret_arn %>"
REGION="<%= @region %>"


echo "Reading password from ${SLURMDBD_CONFIG_FILE}"
password_from_dbd_config=$(grep "^${SLURMDBD_PROPERTY}" ${SLURMDBD_CONFIG_FILE} | sed "s/^${SLURMDBD_PROPERTY}=//g")
if [ -z ${password_from_dbd_config} ]; then
  echo "Error reading password from ${SLURMDBD_CONFIG_FILE}"
  exit 1
fi

echo "Reading password from AWS Secrets Manager: ${SECRET_ARN}"
password_from_secrets_manager=$(aws secretsmanager get-secret-value --secret-id ${SECRET_ARN} --region ${REGION} --query 'SecretString' --output text)

[ "${password_from_dbd_config}" == "${password_from_secrets_manager}" ] && echo "Password match, skipping update" && exit 0

echo "Writing AWS Secrets Manager password to ${SLURMDBD_CONFIG_FILE}"
sed -i "/${SLURMDBD_PROPERTY}/d" ${SLURMDBD_CONFIG_FILE}
echo "${SLURMDBD_PROPERTY}=${password_from_secrets_manager}" >> ${SLURMDBD_CONFIG_FILE}
echo "Password updated in ${SLURMDBD_CONFIG_FILE}"

if systemctl --quiet is-active slurmdbd.service; then
  echo "Restarting services"
  systemctl restart slurmdbd
  echo "Services restarted"
fi

exit 0
