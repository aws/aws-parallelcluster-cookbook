# Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://aws.amazon.com/apache2.0/
#
# or in the "LICENSE.txt" file accompanying this file.
# This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied.
# See the License for the specific language governing permissions and limitations under the License.
import argparse
import logging
from os import makedirs, path
from typing import Dict, List

import yaml

INCLUDE_FILE_HEADER = "# This file is automatically generated by pcluster"
INCLUDE_TARGET_MAPPING = {
    "slurm": "CustomSlurmSettings",
}
log = logging.getLogger()


def _load_cluster_config(input_file_path):
    """
    Load cluster configuration to get info used to render templates.

    :param input_file_path: path to the cluster configuration YAML file
    :return: dictionary containing the cluster configuration structure
    """
    with open(input_file_path, encoding="utf-8") as input_file:
        return yaml.load(input_file, Loader=yaml.SafeLoader)


def _setup_logger():
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s - [%(name)s:%(funcName)s] - %(levelname)s - %(message)s"
    )


def _generate_simple_parameter(param: Dict) -> str:
    """
    Generate string to represent a simple parameter in the Slurm configuration.

    :param param: dictionary containing the parameter structure.
    :return: string to be included in the Slurm configuration file.
    """
    key = list(param.keys())[0]
    value = list(param.values())[0]
    return f"{key}={value}"


def _generate_complex_parameter(param: Dict) -> str:
    """
    Generate string to represent a complex parameter in the Slurm configuration.

    :param param: dictionary containing the parameter structure.
    :return: string to be included in the Slurm configuration file.
    """
    # Some complex parameters require a specific subparameter to be defined first in the line
    # (e.g. the NodeName parameter in the node definition)
    for key, value in param.items():
        # Here we assume that the users do not pass more than one of these parameters in the same dictionary.
        if key.lower() in ["nodename", "partitionname", "nodeset", "downnodes"]:
            first_subparam = {key: value}
            break

    remaining_subparams = {key: value for key, value in param.items() if key not in first_subparam}

    output_string = ""
    # The first loop will either loop over a single parameter or not run at all
    for key, value in first_subparam.items():
        output_string = f"{key}={value}"
    for key, value in remaining_subparams.items():
        output_string = " ".join([output_string, f"{key}={value}"])

    return output_string


def _generate_include_file(include_target: str, include_file_config: List[Dict], output_directory, dryrun: bool):
    """
    Generate single custom Slurm settings include file at a given level.

    :param include_target: target of the custom Slurm setting include file (e.g. slurm, slurmdbd, cgroup, etc.)
    :param include_file_config: dictionary with relevant custom Slurm settings
    :param output_directory: output directory where the include file is written
    :param dryrun: dryrun
    :return:
    """
    log.info("Generating custom_slurm_settings_include_file_%s.conf", include_target)
    if dryrun:
        return

    filename = path.join(output_directory, f"custom_slurm_settings_include_file_{include_target}.conf")

    # The include_file_config is structured as a list of dictionaries, which can either contain one
    # single key-value pair (simple parameters) or multiple pairs (e.g. partition definitions).
    with open(filename, "w", encoding="utf-8") as output_file:
        output_file.write(INCLUDE_FILE_HEADER + "\n\n")

        # If include_file_config is empty, this function will generate an empty config file with only the header
        # defined in INCLUDE_FILE_HEADER
        if include_file_config:
            for param in include_file_config:
                output_string = (
                    _generate_simple_parameter(param) if len(param) == 1 else _generate_complex_parameter(param)
                )
                output_file.write(output_string + "\n")


def _generate_custom_slurm_config_include_files(
    output_directory,
    input_file,
    dryrun,
):
    """Generate Custom Slurm Settings include files for the Slurm configuration."""
    # Make output directories
    output_directory = path.abspath(output_directory)
    pcluster_subdirectory = path.join(output_directory, "pcluster")
    makedirs(pcluster_subdirectory, exist_ok=True)

    # Load cluster configuration from YAML
    cluster_config = _load_cluster_config(input_file)

    for include_target in ["slurm"]:
        # Get specific custom Slurm settings section and if present, create the corresponding include file
        include_file_config = cluster_config["Scheduling"]["SlurmSettings"].get(
            INCLUDE_TARGET_MAPPING[include_target], {}
        )
        _generate_include_file(
            include_target,
            include_file_config,
            pcluster_subdirectory,
            dryrun,
        )

    log.info("Finished.")


def main():
    """
    ParallelCluster Custom Slurm Settings Include File Generator.

    This script uses the information passed by the user in `SlurmSettings/CustomSlurmSettings` and renders them into
    an include file parsable by the Slurm daemons.
    """  # noqa: D403
    try:
        _setup_logger()
        log.info("Running ParallelCluster Custom Slurm Settings Include File Generator")

        parser = argparse.ArgumentParser(description="Take in slurm configuration generator related parameters")

        parser.add_argument("--output-directory", help="Output directory for generated slurm configs", required=True)
        parser.add_argument("--input-file", help="Yaml file containing pcluster configuration file", required=True)
        parser.add_argument("--dryrun", action="store_true", help="dryrun", required=False, default=False)

        args = parser.parse_args()

        _generate_custom_slurm_config_include_files(
            args.output_directory,
            args.input_file,
            args.dryrun,
        )

    except Exception as e:
        log.exception("Failed to generate slurm configurations, exception: %s", e)
        raise


if __name__ == "__main__":
    main()
