import logging
from typing import Dict

from .config_utils import (
    _get_efa_settings,
    _get_instance_types,
    _get_min_gpu_count_and_type,
    _get_min_vcpus,
    _get_real_memory,
)

CONFIG_HEADER = "# This file is automatically generated by pcluster"
log = logging.getLogger()


class ComputeResourceRenderer:
    """Renders a PCluster ComputeResource Config as a Slurm NodeName config, gres config or node_set element."""

    def __init__(self, queue_name: str, compute_resource_config: Dict, no_gpu, memory_ratio, instance_types_data: Dict):
        self.queue_name = queue_name
        self.has_gpu = not no_gpu
        self.instance_types_data = instance_types_data
        self.static_nodes = compute_resource_config["MinCount"]
        self.dynamic_nodes = compute_resource_config["MaxCount"] - self.static_nodes
        self.name = compute_resource_config["Name"]
        self.disable_simultaneous_multithreading = compute_resource_config["DisableSimultaneousMultithreading"]
        self.spot_price = compute_resource_config.get("SpotPrice", None)
        self.instance_types = _get_instance_types(compute_resource_config)
        self.real_memory = _get_real_memory(
            compute_resource_config, self.instance_types, instance_types_data, memory_ratio
        )
        self.EFA_enabled, self.EFA_gdr_support = _get_efa_settings(compute_resource_config)
        self.instance_types = _get_instance_types(compute_resource_config)
        self.vcpus_count, self.threads_per_core = _get_min_vcpus(self.instance_types, instance_types_data)
        self.gpu_count, self.gpu_type = _get_min_gpu_count_and_type(self.instance_types, instance_types_data, log)

    def static_node_name(self):
        """Render the NodeName section for static nodes."""
        return self._node_name("st", self.static_nodes)

    def dynamic_node_name(self):
        """Render the NodeName section for dynamic nodes."""
        return self._node_name("dy", self.dynamic_nodes)

    def vcpus(self) -> int:
        """Return the number of vcpus according to disable_hyperthreading and instance features."""
        return (
            self.vcpus_count
            if not self.disable_simultaneous_multithreading
            else (self.vcpus_count // self.threads_per_core)
        )

    def gpus(self) -> dict:
        """Return the number of GPUs and type for the compute resource."""
        return {"count": self.gpu_count, "type": self.gpu_type}

    def render(self):
        """Launch the rendering process."""
        config = ""
        if self.static_nodes > 0:
            config += f"NodeName={self.static_node_name()}{ self._definitions() }\n"
        if self.dynamic_nodes > 0:
            config += f"NodeName={self.dynamic_node_name()}{ self._definitions(dynamic=True) }\n"

        return config

    def as_node_set(self):
        """Alternative rendering for the NodeSet definition."""
        node_set = ""
        if self.static_nodes > 0:
            node_set += f"{self.static_node_name()},"
        if self.dynamic_nodes > 0:
            node_set += f"{self.dynamic_node_name()},"

        return node_set

    def as_gres(self):
        """Alternative rendering for the gres config."""
        gres_render = ""
        if self.gpu_count > 0:
            if self.static_nodes > 0:
                gres_render += (
                    f"NodeName={self.static_node_name()} Name=gpu "
                    f"Type={ self.gpu_type } File=/dev/nvidia[0-{ self.gpu_count - 1 }]\n"
                )
            if self.dynamic_nodes > 0:
                gres_render += (
                    f"NodeName={self.dynamic_node_name()} Name=gpu "
                    f"Type={ self.gpu_type } File=/dev/nvidia[0-{ self.gpu_count - 1 }]\n"
                )

        return gres_render

    def _definitions(self, dynamic=False):
        definitions = f" CPUs={ self.vcpus() } RealMemory={ self.real_memory } State=CLOUD {self._features(dynamic)}"

        if self.has_gpu and self.gpu_count > 0:
            definitions += f" Gres=gpu:{ self.gpu_type }:{self.gpu_count}"

        return definitions

    def _features(self, dynamic=False):
        resource_type = "static"
        if dynamic:
            resource_type = "dynamic"

        instance_type = f",{self.instance_types[0]}"
        if len(self.instance_types) > 1:
            # When multiple instance types are defined we do not know in advance which one will be used
            # to launch the node. So we do not list any of them as feature
            instance_type = ""

        features = f"Feature={resource_type}{instance_type},{self.name}"
        if self.EFA_enabled:
            features += ",efa"

        if self.gpu_count > 0:
            features += ",gpu"

        return features

    def _node_name(self, type, size):
        return f"{self.queue_name}-{type}-{self.name}-[1-{ size }]"


class QueueRenderer:
    """Renders a PCluster Queue Config as a Slurm partition config or as gres config."""

    def __init__(self, queue_config, no_gpu, memory_ratio, instance_types_data, conf_type="partition", default=False):
        self.name = queue_config["Name"]
        self.is_default = default
        self.conf_type = conf_type
        self.capacity_type = queue_config["CapacityType"]
        self.iam = queue_config["Iam"]
        self.compute_renderers = [
            ComputeResourceRenderer(self.name, compute_resource_config, no_gpu, memory_ratio, instance_types_data)
            for compute_resource_config in queue_config["ComputeResources"]
        ]

    def render(self):
        """Launch the rendering of the required configuration."""
        rendered = f"{CONFIG_HEADER}\n"
        if self.conf_type == "gres":
            rendered += self._as_gres()
        else:
            rendered += self._as_partition()

        return rendered

    def _as_partition(self):
        partition_render = "\n"
        for renderer in self.compute_renderers:
            partition_render += f"{renderer.render()}"

        partition_render += f"\n{self._render_node_set()}\n{self._render_partition()}\n"
        return partition_render

    def _as_gres(self):
        gres_render = ""
        for renderer in self.compute_renderers:
            gres_render += f"{renderer.as_gres()}"

        return gres_render

    def _render_node_set(self):
        node_set = f"NodeSet={self.name}_nodes Nodes="
        for renderer in self.compute_renderers:
            node_set += f"{renderer.as_node_set()}"

        return node_set[:-1]

    def _render_partition(self):
        partition = f"PartitionName={self.name} Nodes={self.name}_nodes MaxTime=INFINITE State=UP"
        if self.is_default:
            partition += " Default=YES"

        return partition
