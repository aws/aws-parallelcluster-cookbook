#!/bin/bash
# This script updates the password used by SSSD to read from Active Directory, according to the secret stored in
# AWS Secrets Manager.
# In particular, it updates the password in /etc/sssd/sssd.conf (ldap_default_authtok) with the one stored
# in AWS Secrets Manager, if they do not match. The resulting file is then copied to its counterpart shared with compute nodes
# to make them able to re-sync their local configuration.
# The script does not require any argument.
#
# Usage: ./update_directory_service_password.sh
# #

set -e

SSSD_CONFIG_FILE="/etc/sssd/sssd.conf"
SSSD_SHARED_CONFIG_FILE="<%= @shared_sssd_conf_path %>"
SSSD_SECTION="domain/default"
SSSD_PROPERTY="ldap_default_authtok"
SECRET_ARN="<%= @secret_arn %>"
REGION="<%= @region %>"

PYTHON_CODE_READ_CONFIG="import configparser;file='${SSSD_CONFIG_FILE}';config=configparser.ConfigParser();config.read(file)"

echo "Reading password from ${SSSD_CONFIG_FILE}"
password_from_sssd_config=$(python3 -c "${PYTHON_CODE_READ_CONFIG}; print(config['${SSSD_SECTION}']['${SSSD_PROPERTY}'])")

echo "Reading password from AWS Secrets Manager: ${SECRET_ARN}"
password_from_secrets_manager=$(aws secretsmanager get-secret-value --secret-id ${SECRET_ARN} --region ${REGION} --query 'SecretString' --output text)

[ "${password_from_sssd_config}" == "${password_from_secrets_manager}" ] && echo "Password match, skipping update" && exit 0

echo "Writing AWS Secrets Manager password to ${SSSD_CONFIG_FILE}"
python3 -c "${PYTHON_CODE_READ_CONFIG}; config['${SSSD_SECTION}']['${SSSD_PROPERTY}']='${password_from_secrets_manager}'; config.write(open(file,'w'))"
echo "Password updated in ${SSSD_CONFIG_FILE}"
cp ${SSSD_CONFIG_FILE} ${SSSD_SHARED_CONFIG_FILE}
echo "${SSSD_CONFIG_FILE} copied to ${SSSD_SHARED_CONFIG_FILE}"

echo "Restarting services"
service sssd restart
echo "Services restarted"