#!/bin/bash
# This script updates the password used by SSSD to read from Active Directory, according to the secret stored in
# AWS Secrets Manager or AWS SSM.
# In particular, it updates the password in /etc/sssd/sssd.conf (ldap_default_authtok) with the one stored
# in AWS Secrets Manager or AWS SSM, if they do not match. The resulting file is then copied to its counterpart shared with compute nodes
# to make them able to re-sync their local configuration.
# The script does not require any argument.
#
# Usage: ./update_directory_service_password.sh
# #

set -e

SSSD_CONFIG_FILE="/etc/sssd/sssd.conf"
SSSD_SHARED_CONFIG_FILE="<%= @shared_sssd_conf_path %>"
SSSD_SECTION="domain/default"
SSSD_PROPERTY="ldap_default_authtok"
SECRET_ARN="<%= @secret_arn %>"
REGION="<%= @region %>"

PYTHON_CODE_READ_CONFIG="import configparser;file='${SSSD_CONFIG_FILE}';config=configparser.ConfigParser();config.read(file)"

echo "[INFO] Reading password from ${SSSD_CONFIG_FILE}"
password_from_sssd_config=$(python3 -c "${PYTHON_CODE_READ_CONFIG}; print(config['${SSSD_SECTION}']['${SSSD_PROPERTY}'])")

echo "[INFO] Reading password from AWS: ${SECRET_ARN}"
service=$(echo "${SECRET_ARN}" | cut -d ':' -f 3)
resource=$(echo "${SECRET_ARN}" | cut -d ':' -f 6-)
if [ "$service" == "secretsmanager" ]; then
  secret_name=$(echo "$resource" | cut -d ':' -f 2)
  echo "[INFO] Reading password as a secret from AWS Secrets Manager: ${secret_name}"
  password_from_secret_store=$(aws secretsmanager get-secret-value --secret-id "${secret_name}" --region "${REGION}" --query "SecretString" --output text)
elif [ "$service" == "ssm" ]; then
  parameter_name=$(echo "$resource" | cut -d '/' -f 2)
  echo "[INFO] Reading password as a parameter from AWS SSM: ${SECRET_ARN}"
  password_from_secret_store=$(aws ssm get-parameter --name "${parameter_name}" --region "${REGION}" --with-decryption --query "Parameter.Value" --output text)
else
  echo "[ERROR] The secret ${SECRET_ARN} is not supported"
  exit 1
fi

[ "${password_from_sssd_config}" == "${password_from_secret_store}" ] && echo "[WARN] Password match, skipping update" && exit 0

echo "[INFO] Writing AWS Secrets Manager password to ${SSSD_CONFIG_FILE}"
python3 -c "${PYTHON_CODE_READ_CONFIG}; config['${SSSD_SECTION}']['${SSSD_PROPERTY}']='${password_from_secret_store}'; config.write(open(file,'w'))"
echo "[INFO] Password updated in ${SSSD_CONFIG_FILE}"

cp "${SSSD_CONFIG_FILE}" "${SSSD_SHARED_CONFIG_FILE}"
echo "[INFO] ${SSSD_CONFIG_FILE} copied to ${SSSD_SHARED_CONFIG_FILE}"

echo "[INFO] Restarting service: sssd"
service sssd restart
echo "[INFO] Service sssd restarted"
