#!/bin/bash

set -euo pipefail

cfnconfig_file="/etc/parallelcluster/cfnconfig"
. ${cfnconfig_file}

# Check expected variables from cfnconfig file
function check_params () {
  if [ -z "${cfn_region}" ] || \
     [ -z "${cfn_preinstall}" ] || [ -z "${cfn_preinstall_args}" ] || \
     [ -z "${cfn_postinstall}" ] || [ -z "${cfn_postinstall_args}" ] || \
     [ -z "${cfn_postupdate}" ] || [ -z "${cfn_postupdate_args}" ]
  then
    error_exit "One or more required variables from ${cfnconfig_file} file are undefined"
  fi
}

# Error exit function
function error_exit () {
  script=`basename $0`
  echo "parallelcluster: ${script} - $1"
  logger -t parallelcluster "${script} - $1"
  exit 1
}

function download_run (){
  url=$1
  shift
  scheme=$(echo "${url}"| cut -d: -f1)
  tmpfile=$(mktemp)
  trap "/bin/rm -f $tmpfile" RETURN
  if [ "${scheme}" == "s3" ]; then
    <%= node['cluster']['cookbook_virtualenv_path'] %>/bin/aws --region ${cfn_region} s3 cp ${url} - > $tmpfile || return 1
  else
    wget -qO- ${url} > $tmpfile || return 1
  fi
  chmod +x $tmpfile || return 1
  $tmpfile "$@" || error_exit "Failed to run ${ACTION}, ${file} failed with non 0 return code: $?"
}

function get_stack_status () {
  region=$(sed -n 's/cfn_region=//p' /etc/parallelcluster/cfnconfig | xargs) || return 1
  stack_name=$(sed -n 's/stack_name=//p' /etc/parallelcluster/cfnconfig | xargs) || return 1
  stack_status=$(aws cloudformation describe-stacks --region "${region}" --stack-name "${stack_name}" --query Stacks[0].StackStatus | xargs) || return 1
  echo ${stack_status}
}

function run_preinstall () {
  if [ "${cfn_preinstall}" != "NONE" ]; then
    file="${cfn_preinstall}"
    if [ "${cfn_preinstall_args}" != "NONE" ]; then
      download_run ${cfn_preinstall} "${cfn_preinstall_args[@]}"
    else
      download_run ${cfn_preinstall}
    fi
  fi || error_exit "Failed to run pre install hook"
}

function run_postinstall () {
  if [ "${cfn_postinstall}" != "NONE" ]; then
    file="${cfn_postinstall}"
    if [ "${cfn_postinstall_args}" != "NONE" ]; then
      download_run ${cfn_postinstall} "${cfn_postinstall_args[@]}"
    else
      download_run ${cfn_postinstall}
    fi
  fi || error_exit "Failed to run post install hook"
}

function run_postupdate () {
  if [ "${cfn_postupdate}" != "NONE" ]; then
    stack_status=$(get_stack_status) || error_exit "Failed to get the stack status, check the HeadNode instance profile's Iam policies"

    if [ "${stack_status}" != "UPDATE_IN_PROGRESS" ]; then
      echo "Post update hook called with CFN stack in state ${stack_status}, doing nothing"
    elif [ "${cfn_postupdate_args}" != "NONE" ]; then
      download_run ${cfn_postupdate} "${cfn_postupdate_args[@]}"
    else
      download_run ${cfn_postupdate}
    fi
  fi || error_exit "Failed to run post update hook"
}

check_params

ACTION=${1#?}
case ${ACTION} in
  preinstall)
    run_preinstall
    ;;
  postinstall)
    run_postinstall
    ;;
  postupdate)
    run_postupdate
    ;;
  *)
    echo "Unknown action. Exit gracefully"
    exit 0
esac
