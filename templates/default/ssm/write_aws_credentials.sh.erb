#!/bin/bash

# This script writes AWS credentials for the cluster admin user.
# This script is meant to be called by SSM.
#
# Usage: $SCRIPT_NAME [AWS_IAM_ASSUMED_ROLE_ARN] [AWS_ACCESS_KEY_ID] [AWS_SECRET_ACCESS_KEY] [AWS_SESSION_TOKEN]

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"

CLUSTER_ADMIN_USER=<%= node['cluster']['cluster_admin_user'] %>

AWS_IAM_ASSUMED_ROLE_ARN=$1
AWS_ACCESS_KEY_ID=$2
AWS_SECRET_ACCESS_KEY=$3
AWS_SESSION_TOKEN=$4

function error () {
  >&2 echo "ERROR: $1"
  exit 1
}

echo "Running script: $SCRIPT_DIR/$SCRIPT_NAME"
echo "Running as user: $(whoami)"
echo "Running from folder: $(pwd)"
echo "Running for cluster admin user: $CLUSTER_ADMIN_USER"

[[ -n $AWS_IAM_ASSUMED_ROLE_ARN ]] || error "Required argument missing: AWS_IAM_ASSUMED_ROLE_ARN"
[[ -n $AWS_ACCESS_KEY_ID ]] || error "Required argument missing: AWS_ACCESS_KEY_ID"
[[ -n $AWS_SECRET_ACCESS_KEY ]] || error "Required argument missing: AWS_SECRET_ACCESS_KEY"
[[ -n $AWS_SESSION_TOKEN ]] || error "Required argument missing: AWS_SESSION_TOKEN"

[[ -n $(id -u $CLUSTER_ADMIN_USER 2>/dev/null) ]] || error "User does not exist: $CLUSTER_ADMIN_USER"

CLUSTER_ADMIN_USER_HOME=$(sudo -u $CLUSTER_ADMIN_USER env | grep -e "^HOME=" | cut -d = -f 2)

[[ -d $CLUSTER_ADMIN_USER_HOME ]] || error "User HOME does not exist: $CLUSTER_ADMIN_USER_HOME"

CREDENTIALS_FILE="$CLUSTER_ADMIN_USER_HOME/.aws/credentials"

echo "Writing AWS credentials for role $AWS_IAM_ASSUMED_ROLE_ARN in $CREDENTIALS_FILE"

mkdir -p $(dirname $CREDENTIALS_FILE)

cat > $CREDENTIALS_FILE <<EOL
[default]
aws_access_key_id = $AWS_ACCESS_KEY_ID
aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
aws_session_token = $AWS_SESSION_TOKEN
EOL

echo "AWS credentials written"

echo "Checking AWS credentials"

[[ $? == 0 ]] || error "Failed AWS credentials check: error when calling STS"
actual_identity_arn=$(sudo -u $CLUSTER_ADMIN_USER aws sts get-caller-identity --output text --query 'Arn')
[[ $actual_identity_arn == $AWS_IAM_ASSUMED_ROLE_ARN ]] || error "Failed AWS credentials check: expected identity is $AWS_IAM_ASSUMED_ROLE_ARN, but found $actual_identity_arn"

echo "AWS credentials are correct"
