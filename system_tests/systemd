#!/bin/bash

set -e

mock_list=()

function premock(){
    path=$1
    mock_list+=($path)
    cp $path ${path}.bak
}

function mock(){
    path=$1
    premock $path
    echo -e "#\! /usr/bin/bash" > $path
    chmod +x $path
}

function unmock(){
    for path in "${mock_list[@]}"; do
        if [ -e $path.bak ]; then
            mv ${path}.bak ${path}
        else
            rm ${path}
        fi
    done
}

echo "Configuring..."
cd /tmp/cookbooks

useradd -m ubuntu
mkdir -p /home/ubuntu/.ssh
chown -R ubuntu:ubuntu /home/ubuntu/.ssh

mkdir -p /opt/parallelcluster
echo "aws-parallelcluster-cookbook-3.7.0" > /opt/parallelcluster/.bootstrapped

mkdir -p /opt/parallelcluster/scripts
mkdir -p /etc/parallelcluster

# re-vendor in case modifications have been made to any of the recipes that have
# been mapped in via a volume.
if [ -e /tmp/cookbooks/Berksfile.lock ]; then
    rm /tmp/cookbooks/Berksfile.lock
fi
rm -fr /tmp/cookbooks/* /etc/chef/cookbooks/*
cp -r /build/* /tmp/cookbooks/
cp /build/system_tests/test_attributes.rb /tmp/cookbooks/attributes
cd /tmp/cookbooks
LANG=en_US.UTF-8 /opt/cinc/embedded/bin/berks vendor /etc/chef/cookbooks --delete || (echo 'Vendoring cookbook failed.' && exit 1)

# Create mocks for system programs that are not running or do not make sense virtualized
mocks=(/opt/slurm/bin/squeue
       /opt/slurm/bin/scancel
       /usr/bin/ssh-keyscan
       /usr/sbin/iptables
       /usr/bin/hostname
       /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl)

for mock_path in "${mocks[@]}"; do
    mock $mock_path
done

premock /usr/bin/systemctl
cp /build/system_tests/systemctl /usr/bin/systemctl

premock /opt/slurm/bin/sinfo
echo -e "#\! /usr/bin/bash\necho ondemand-dy-c5.2xlarge-1 idle~\n" > /opt/slurm/bin/sinfo
chmod +x /opt/slurm/bin/sinfo

mkdir /etc/parallelcluster/slurm_plugin

# mock clustermtg_heartbeat for head_node_slurm_finalize:
mkdir -p /opt/slurm/etc/pcluster/.slurm_plugin/
touch /opt/slurm/etc/pcluster/.slurm_plugin/clustermgtd_heartbeat

cinc-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::init &&
/opt/parallelcluster/scripts/fetch_and_run -preinstall &&
cinc-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::config &&
/opt/parallelcluster/scripts/fetch_and_run -postinstall &&
cinc-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::finalize &&

# if there is a chef error, show it to the user.
if [ -e /etc/chef/local-mode-cache/cache/cinc-stacktrace.out ]; then
    cat /etc/chef/local-mode-cache/cache/cinc-stacktrace.out
fi

# unmock
rm /opt/slurm/etc/pcluster/.slurm_plugin/clustermgtd_heartbeat
unmock

echo "Done."
